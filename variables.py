from text import baa_list, child_baa_list
import random

def get_recommended_baas(user_data):
    recommended_baas = []

    # –ë–µ—Ä–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    age_range = user_data.get("age")
    age_baa_mapping = {
        "age_less_18": child_baa_list,
        "age_18_35": baa_list,
        "age_more_35": ["üçÉAshitaba", "ü¶™Squalene"]
    }
    recommended_baas.extend(age_baa_mapping.get(age_range, []))

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–µ–π
    child_answers_mapping = {
        "veg_consumption_child": {
            "veg_child_yes": ["ü•ïCaroten"],
            "veg_child_no": ["üçÉSpirulina"]
        },
        "seafood_child": {
            "seafood_child_no": ["üêüMH Fishix", "üåøIodiumKelp"]
        },
        "memorybad_child": {
            "memorybad_child_often": ["üêüMH Fishix", "üåøIodiumKelp"],
            "memorybad_child_time_to_time": ["üêüMH Fishix", "üåøIodiumKelp"],
            "memorybad_child_no": ["üçÉSpirulina"]
        },
        "screentime_child": {
            "screentime_child_often": ["ü•ïCaroten"],
            "screentime_child_no": ["üçÉSpirulina"]
        },
        "activesport_child": {
            "activesport_child_yes": ["üçÉSpirulina"],
            "activesport_child_no": ["üåøIodiumKelp"]
        },
        "parametr_child": {
            "parametr_child_norm": ["üåøIodiumKelp"],
            "parametr_child_underweight": ["üçÉSpirulina", "üåøIodiumKelp", "üêüMH Fishix"],
            "parametr_child_overweight": ["üåøIodiumKelp"]
        },
        "stomach_child": {
            "stomach_child_often": ["üåøIodiumKelp"],
            "stomach_child_no": ["üåøIodiumKelp", "ü•ïCaroten"]
        }
    }

    for question, answers in child_answers_mapping.items():
        answer = user_data.get(question)
        recommended_baas.extend(answers.get(answer, []))

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∑—Ä–æ—Å–ª—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    adult_answers_mapping = {
        "veg_consumption": {
            "often": ["üåøZostera"],
            "rarely": ["üçÉSpirulina", "üçÉAshitaba", "üåøZostera"]
        },
        "fatigue_feeling": {
            "often": ["ü¶™Squalene", "üç§CardioMarine", "üåäVitaMarine A", "üåäVitaMarine B", "üåøIodiumKelp"],
            "rarely": ["üçÉAshitaba", "ü•ïCaroten"]
        },
	    "seafood_consumption": {
            "often": ["üçÉAshitaba"],
            "rarely": ["üåäVitaMarine A", "üåäVitaMarine B", "üåøIodiumKelp", "üçÉSpirulina", "üçÉChlorella",
            "ü¶™Squalene",]
        },
	    "memory_issues":{
            "often": ["üç§CardioMarine", "üåäVitaMarine B", "üåøIodiumKelp"],
            "sometimes": ["üç§CardioMarine", "üåäVitaMarine B", "üåøIodiumKelp"],
            "rarely": ["üçÉSpirulina", "üçÉChlorella"]
        },
	    "vision_problems":{
            "yes": ["ü•ïCaroten", "üåäVitaMarine B"],
            "no": ["üåøIodiumKelp"]
        },
	    "screen_time":{
            "often": ["ü•ïCaroten", "üåäVitaMarine B"],
            "rarely": ["üçÉAshitaba"]

        },
	    "joint_mobility":{
            "yes": ["üç§ArtroMarine", "ü¶™Squalene"],
            "no": ["üçÉChlorella"]
        },
	    "active_sport":{
            "yes": ["üç§ArtroMarine", "üçÉSpirulina", "ü¶™Squalene"],
            "no": ["üçÉChlorella"]
        },
	    "numbness":{
            "often": ["üç§CardioMarine"],
            "rarely": ["üçÉChlorella"]
        },
	    "headaches":{
            "often": ["üç§CardioMarine", "üåäVitaMarine A"],
            "rarely": ["ü•ïCaroten"]
        },
	    "youthfulness":{
            "yes": ["üçÉAshitaba", "ü¶™Squalene"]
        },
	    "detox":{
            "yes": ["üçÉAshitaba", "üçÉChlorella", "üåøZostera"],
            "no": ["üåäVitaMarine A", "üåäVitaMarine B", "üçÉSpirulina", "üåøIodiumKelp", "ü•ïCaroten"]
        },
	    "digestion":{
            "yes": ["üçÉAshitaba", "üåøZostera", "üçÉChlorella"],
            "no": ["üåäVitaMarine A", "üåäVitaMarine B",
                "üçÉSpirulina", "üåøIodiumKelp",
                "ü•ïCaroten", "ü¶™Squalene",]
        },
	    "reproductive_support":{
            "repro_support_yes": ["üåøIodiumKelp"],
            "repro_support_no": ["üçÉAshitaba", "üçÉChlorella", "üåøZostera", "ü¶™Squalene"]
        },
	    "beauty_enhancement":{
            "beauty_yes": ["üç§CardioMarine", "üç§ArtroMarine", "ü¶™Squalene"],
            "beauty_no": ["üçÉAshitaba", "üçÉChlorella", "üçÉSpirulina", "üåøIodiumKelp"]
        },
	    "male_support":{
            "male_support_yes":["üç§CardioMarine", "üåäVitaMarine A"],
            "male_support_no": ["üçÉAshitaba", "ü¶™Squalene"]
        },
	    "male_symptoms":{
            "male_symptoms_yes": ["üç§CardioMarine", "üåäVitaMarine A"],
            "male_symptoms_no": ["üçÉAshitaba", "ü¶™Squalene"]
        }

    }

    for question, answers in adult_answers_mapping.items():
        answer = user_data.get(question)
        recommended_baas.extend(answers.get(answer, []))

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    recommended_baas = list(set(recommended_baas))

    # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –±–∞–¥–∞, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 3
    if len(recommended_baas) > 3:
        recommended_baas = random.sample(recommended_baas, 3)

    # –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –±–∞–¥–æ–≤ –º–µ–Ω—å—à–µ 3, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ, —á—Ç–æ–±—ã –∏—Ö —Å—Ç–∞–ª–æ 3
    while len(recommended_baas) < 3:
        baa = random.choice(baa_list)
        if baa not in recommended_baas:
            recommended_baas.append(baa)

    return recommended_baas